import hashlib
import time
from dataclasses import dataclass
from typing import List, Dict, Optional, Set, Tuple
import numpy as np
import tensorflow as tf

@dataclass
class Transaction:
    sender: str
    receiver: str
    amount: float
    timestamp: float
    signature: str
    # Vector representing transaction "intent" in field space
    intent_vector: np.ndarray

@dataclass
class WorldState:
    balances: Dict[str, float]
    vector_field: np.ndarray
    probability_field: np.ndarray
    branch_id: str
    parent_id: Optional[str]
    timestamp: float
    
    def hash(self) -> str:
        """Compute cryptographic hash of world state"""
        state_str = f"{self.branch_id}:{self.parent_id}:{self.timestamp}"
        state_str += ":".join(f"{k}:{v}" for k, v in sorted(self.balances.items()))
        state_str += self.vector_field.tobytes().hex()
        state_str += self.probability_field.tobytes().hex()
        return hashlib.sha256(state_str.encode()).hexdigest()

class QuantumNode:
    def __init__(
        self,
        node_id: str,
        initial_field_shape: Tuple[int, ...],
        vector_dims: int,
        min_consensus_threshold: float = 0.75
    ):
        self.node_id = node_id
        self.field_shape = initial_field_shape
        self.vector_dims = vector_dims
        self.min_consensus_threshold = min_consensus_threshold
        
        # Initialize fields
        self.vector_field = tf.Variable(
            tf.nn.l2_normalize(
                tf.random.normal(initial_field_shape + (vector_dims,)),
                axis=-1
            )
        )
        self.probability_field = tf.Variable(
            tf.nn.softmax(
                tf.random.uniform(initial_field_shape)
            )
        )
        
        # Track world states and branches
        self.world_states: Dict[str, WorldState] = {}
        self.active_branches: Set[str] = set()
        self.pending_transactions: List[Transaction] = []
        
        # Initialize genesis state
        self._create_genesis_state()
    
    def _create_genesis_state(self):
        """Create the initial world state"""
        genesis_state = WorldState(
            balances={self.node_id: 1000.0},  # Initial allocation
            vector_field=self.vector_field.numpy(),
            probability_field=self.probability_field.numpy(),
            branch_id="genesis",
            parent_id=None,
            timestamp=time.time()
        )
        self.world_states["genesis"] = genesis_state
        self.active_branches.add("genesis")
    
    def submit_transaction(self, transaction: Transaction) -> bool:
        """Submit a transaction to the network for processing"""
        # Verify basic transaction validity
        if transaction.sender not in self.world_states["genesis"].balances:
            return False
        if transaction.amount <= 0:
            return False
        
        # Queue transaction for probabilistic processing
        self.pending_transactions.append(transaction)
        return True
    
    def compute_branch_probability(
        self,
        transaction: Transaction,
        world_state: WorldState
    ) -> float:
        """Compute probability of a transaction creating a new branch"""
        # Compute cosine similarity between transaction intent and field
        intent_similarity = tf.reduce_mean(
            tf.reduce_sum(
                transaction.intent_vector * world_state.vector_field,
                axis=-1
            )
        )
        
        # Factor in probability field
        field_prob = tf.reduce_mean(world_state.probability_field)
        
        # Combine probabilities (could be made more sophisticated)
        return float(0.5 * (intent_similarity + field_prob))
    
    def process_pending_transactions(self):
        """Process pending transactions and potentially create new branches"""
        for transaction in self.pending_transactions:
            for branch_id in list(self.active_branches):
                current_state = self.world_states[branch_id]
                
                # Skip if sender doesn't have enough balance
                if (current_state.balances.get(transaction.sender, 0)
                    < transaction.amount):
                    continue
                
                # Compute branching probability
                branch_prob = self.compute_branch_probability(
                    transaction,
                    current_state
                )
                
                if branch_prob > self.min_consensus_threshold:
                    # Create new world state
                    new_balances = dict(current_state.balances)
                    new_balances[transaction.sender] -= transaction.amount
                    new_balances[transaction.receiver] = (
                        new_balances.get(transaction.receiver, 0) +
                        transaction.amount
                    )
                    
                    # Update fields based on transaction success
                    new_vector_field = self._update_vector_field(
                        current_state.vector_field,
                        transaction.intent_vector,
                        branch_prob
                    )
                    
                    new_probability_field = self._update_probability_field(
                        current_state.probability_field,
                        branch_prob
                    )
                    
                    # Create new branch
                    new_branch_id = hashlib.sha256(
                        f"{branch_id}:{transaction.signature}".encode()
                    ).hexdigest()
                    
                    new_state = WorldState(
                        balances=new_balances,
                        vector_field=new_vector_field,
                        probability_field=new_probability_field,
                        branch_id=new_branch_id,
                        parent_id=branch_id,
                        timestamp=time.time()
                    )
                    
                    self.world_states[new_branch_id] = new_state
                    self.active_branches.add(new_branch_id)
                    
                    # Prune old branches to maintain computational feasibility
                    if len(self.active_branches) > 10:  # Arbitrary limit
                        self._prune_least_probable_branch()
        
        # Clear processed transactions
        self.pending_transactions = []
    
    def _update_vector_field(
        self,
        current_field: np.ndarray,
        intent_vector: np.ndarray,
        success_prob: float
    ) -> np.ndarray:
        """Update vector field based on successful transaction"""
        # Hebbian-inspired update
        learning_rate = 0.01 * success_prob
        new_field = current_field + learning_rate * (
            np.broadcast_to(intent_vector, current_field.shape) -
            current_field
        )
        return new_field / np.linalg.norm(new_field, axis=-1, keepdims=True)
    
    def _update_probability_field(
        self,
        current_field: np.ndarray,
        success_prob: float
    ) -> np.ndarray:
        """Update probability field based on transaction success"""
        learning_rate = 0.01 * success_prob
        new_field = current_field * (1 + learning_rate)
        return new_field / new_field.sum()
    
    def _prune_least_probable_branch(self):
        """Remove least probable branch from active set"""
        min_prob_branch = min(
            self.active_branches,
            key=lambda b: np.mean(
                self.world_states[b].probability_field
            )
        )
        self.active_branches.remove(min_prob_branch)
    
    def get_branch_state(self, branch_id: str) -> Optional[WorldState]:
        """Get the current state of a specific branch"""
        return self.world_states.get(branch_id)
    
    def get_most_probable_branch(self) -> str:
        """Get the currently most probable branch ID"""
        return max(
            self.active_branches,
            key=lambda b: np.mean(
                self.world_states[b].probability_field
            )
        )

def create_test_network():
    """Create a test network with some sample transactions"""
    # Initialize node
    node = QuantumNode(
        node_id="node1",
        initial_field_shape=(4, 4),  # Small field for testing
        vector_dims=3
    )
    
    # Create some test transactions
    transactions = [
        Transaction(
            sender="node1",
            receiver="user1",
            amount=100.0,
            timestamp=time.time(),
            signature="sig1",
            intent_vector=np.random.randn(3)
        ),
        Transaction(
            sender="node1",
            receiver="user2",
            amount=150.0,
            timestamp=time.time(),
            signature="sig2",
            intent_vector=np.random.randn(3)
        )
    ]
    
    # Process transactions
    for tx in transactions:
        node.submit_transaction(tx)
    node.process_pending_transactions()
    
    return node

if __name__ == "__main__":
    # Create and test network
    test_node = create_test_network()
    
    # Print most probable branch state
    best_branch = test_node.get_most_probable_branch()
    state = test_node.get_branch_state(best_branch)
    print(f"Most probable branch: {best_branch}")
    print(f"Balances: {state.balances}")
