@page "/login"
@using BlessedRSI.Web.Models
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Sign In - BlessedRSI</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-primary text-white text-center py-4">
                    <h3 class="mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        Welcome Back
                    </h3>
                    <p class="mb-0 opacity-75">Sign in to your BlessedRSI account</p>
                </div>
                
                <div class="card-body p-4">
                    <!-- Verse of encouragement -->
                    <div class="text-center mb-4">
                        <blockquote class="blockquote-footer small">
                            <em>"Trust in the Lord with all your heart" - Proverbs 3:5</em>
                        </blockquote>
                    </div>

                    <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-envelope"></i>
                                </span>
                                <InputText @bind-Value="loginRequest.Email" class="form-control" 
                                          id="email" placeholder="your.email@example.com" />
                            </div>
                            <ValidationMessage For="() => loginRequest.Email" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-lock"></i>
                                </span>
                                <InputText @bind-Value="loginRequest.Password" type="password" 
                                          class="form-control" id="password" placeholder="Enter your password" />
                            </div>
                            <ValidationMessage For="() => loginRequest.Password" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginRequest.RememberMe" class="form-check-input" id="rememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle"></i>
                                @errorMessage
                            </div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <i class="fas fa-spinner fa-spin"></i> Signing In...
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt"></i> Sign In
                                }
                            </button>
                        </div>
                    </EditForm>

                    <hr class="my-4">

                    <div class="text-center">
                        <a href="/forgot-password" class="text-decoration-none">
                            <i class="fas fa-key"></i> Forgot your password?
                        </a>
                    </div>
                </div>

                <div class="card-footer bg-light text-center py-3">
                    <small class="text-muted">
                        Don't have an account? 
                        <a href="/register" class="text-decoration-none fw-bold">
                            Join the fellowship
                        </a>
                    </small>
                </div>
            </div>

            <!-- Faith-based encouragement -->
            <div class="text-center mt-4">
                <small class="text-muted">
                    <i class="fas fa-shield-alt text-primary"></i>
                    Your data is protected with industry-standard security
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = "";
    private bool isLoading = false;
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        // Clear any existing tokens
        _ = JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var response = await JSRuntime.InvokeAsync<string>("fetch", "/api/auth/login", new
            {
                method = "POST",
                headers = new
                {
                    Content_Type = "application/json"
                },
                body = JsonSerializer.Serialize(loginRequest)
            });

            var responseData = JsonSerializer.Deserialize<AuthResponse>(response);

            if (responseData?.Success == true)
            {
                // Store access token
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", responseData.AccessToken);
                
                // Redirect to return URL or dashboard
                var redirectUrl = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/dashboard";
                Navigation.NavigateTo(redirectUrl, forceLoad: true);
            }
            else
            {
                errorMessage = responseData?.Message ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during sign in. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .card {
        border-radius: 1rem;
    }
    
    .card-header {
        border-radius: 1rem 1rem 0 0 !important;
    }
    
    .input-group-text {
        background-color: #f8f9fa;
        border-right: none;
    }
    
    .form-control {
        border-left: none;
    }
    
    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #0d6efd, #0b5ed7);
        border: none;
    }
    
    .btn-primary:hover {
        background: linear-gradient(135deg, #0b5ed7, #0a58ca);
    }
</style>