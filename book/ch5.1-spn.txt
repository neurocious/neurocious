Chapter 5.1 — Spatial Probability Networks
The SPN-VAE Framework

Artificial intelligence has long been driven by gradients and probabilities. But what if we reconceptualized learning as movement through a structured belief landscape — not just finding the steepest descent, but the most meaningful path? This is the essence of a Spatial Probability Network (SPN): a system that learns not only where to go, but why that path flows the way it does.

In the SPN, beliefs are not static data points — they are positioned in fields that exert influence. These fields carry directional semantics, narrative alignment, and epistemic significance. They allow models to route their reasoning dynamically, contextually, and with awareness of underlying belief structures.

1. Core Field Structure

The SPN is implemented as a field-based architecture that maintains multiple interacting force fields:

```csharp
public class SpatialProbabilityNetwork
{
    // Core fields
    private readonly PradOp vectorField;        // Learned directional fields for belief tendency
    private readonly PradOp curvatureField;     // Field curvature for belief stability
    private readonly PradOp entropyField;       // Field entropy for uncertainty
    private readonly PradOp alignmentField;     // Field alignment for belief coherence
    
    // Neural components for policy and prediction
    private readonly PolicyNetwork policyNetwork;
    private readonly ReflexNetwork reflexNetwork; 
    private readonly PredictionNetwork predictionNetwork;

    // World branching and exploration
    private readonly List<SpatialProbabilityNetwork> branches;
    private readonly Dictionary<string, int> routeVisits;
    private readonly Random random;
    private readonly EnhancedVAE vaeModel;

    // Field parameters
    private const float LEARNING_RATE = 0.01f;
    private const float FIELD_DECAY = 0.999f;
    private const float MIN_FIELD_STRENGTH = 1e-6f;
    private const float NOVELTY_WEIGHT = 0.1f;
    private const float BRANCH_DECAY_RATE = 0.95f;
}
```

These fields are governed by parameters that characterize the local geometry of belief:

```csharp
public class FieldParameters
{
    public float Curvature { get; set; }     // Stability measure - how resistant is this belief to change?
    public float Entropy { get; set; }       // Uncertainty measure - how ambiguous is this region?
    public float Alignment { get; set; }     // Coherence measure - how well does it align with existing beliefs?
}
```

2. Belief Routing

The heart of the SPN is its ability to route beliefs through these fields, determining how thoughts evolve and transform. The routing process combines VAE-based state encoding, field-based navigation, and exploration:

```csharp
public (PradResult routing, PradResult confidence, PradResult policy, PradResult reflexes, 
       PradResult predictions, FieldParameters fieldParams, BeliefExplanation explanation) 
ProcessState(PradOp state)
{
    // Add to temporal buffer for history tracking
    if (temporalBuffer.Count >= bufferSize)
    {
        temporalBuffer.Dequeue();
    }
    temporalBuffer.Enqueue(state.CurrentTensor);

    // Get base routing with exploration
    var (routing, confidence, fieldParams) = RouteStateInternal(state);
    
    // Get temporal context for policy decisions
    var historyTensor = GetHistoryTensor();

    // Generate policy and value estimates
    var (policy, _) = policyNetwork.Forward(state, new PradOp(historyTensor));

    // Check reflexes for immediate responses
    var reflexes = reflexNetwork.Forward(state);

    // Make predictions about future states
    var predictions = predictionNetwork.Forward(new PradOp(historyTensor));

    // Generate belief explanation
    var latent = vaeModel != null ? vaeModel.Encode(state) : state;
    var explanation = GenerateBeliefExplanation(latent, routing, fieldParams, confidence);

    return (routing, confidence, policy, reflexes, predictions, fieldParams, explanation);
}
```

3. Field Learning and Adaptation

The SPN learns by continuously adapting its fields based on experience and feedback. This adaptation process is carefully controlled to maintain stability while allowing growth:

```csharp
public void UpdateFields(PradResult route, PradResult reward, PradOp state)
{
    // Get current field parameters
    var (_, _, fieldParams) = RouteStateInternal(state);

    // Calculate adaptive learning rate
    float adaptiveLearningRate = LEARNING_RATE * 
        (1 - fieldParams.Entropy) *         // Learn more when certain
        (1 / (1 + fieldParams.Curvature));  // Learn less in unstable regions

    // Update vector field with belief-weighted learning
    var fieldUpdate = route.Then(r => {
        var learningRateTensor = new Tensor(r.Result.Shape, adaptiveLearningRate);
        return r.Mul(reward.Result).Mul(learningRateTensor);
    });

    // Apply weighted update based on alignment
    var alignmentWeight = Math.Abs(fieldParams.Alignment);
    vectorField = new PradOp(
        vectorField.Mul(new Tensor(vectorField.CurrentShape, 1 - alignmentWeight * LEARNING_RATE)).Result
        .Add(fieldUpdate.Result)
    );

    // Normalize field and update metrics
    vectorField = new PradOp(NormalizeVectorField(vectorField.CurrentTensor));
    UpdateFieldMetrics(state, route, fieldParams);
    ApplyBeliefCoupling(route, fieldParams);
}
```

4. Belief Explanation and Introspection

A key feature of the SPN is its ability to explain its belief states and decisions. This is implemented through a comprehensive explanation system:

```csharp
public class BeliefExplanation
{
    public string BeliefLabel { get; set; }              
    public Dictionary<string, float> FeatureContributions { get; set; } = new();
    public float Confidence { get; set; }
    public FieldParameters FieldParams { get; set; }     
    public string Justification { get; set; }
    public List<string> TopContributingFeatures { get; set; } = new();
    public Dictionary<string, float> CounterfactualShifts { get; set; } = new();
    public List<float[]> TrajectoryPath { get; set; } = new();
}
```

The explanation system provides:
1. Feature attribution - which aspects of the input drove the belief
2. Counterfactual analysis - how would the belief change if features were different
3. Historical context - the trajectory that led to this belief
4. Field-based justification - how the belief fits into the broader epistemic landscape

5. Neural Components

The SPN combines field-based routing with neural networks that handle policy decisions, reflexive responses, and predictions:

```csharp
private class PolicyNetwork 
{
    private readonly PradOp stateEncoder;
    private readonly PradOp historyEncoder;
    private readonly PradOp attention;
    private readonly PradOp policyHead;
    private readonly PradOp valueHead;

    public (PradResult policy, PradResult value) Forward(PradOp currentState, PradOp history)
    {
        var stateEncoded = stateEncoder.MatMul(currentState)
            .Then(PradOp.LeakyReLUOp);

        var historyEncoded = historyEncoder.MatMul(history)
            .Then(PradOp.LeakyReLUOp);

        // Multi-head attention over history
        var attentionWeights = stateEncoded.MatMul(attention)
            .Then(x => x.MatMul(historyEncoded.Transpose().Result))
            .Then(PradOp.SoftmaxOp);

        var attentionOutput = attentionWeights.MatMul(historyEncoded.Result);

        // Generate policy and value estimates
        var combined = ConcatFeatures(stateEncoded.Result, attentionOutput.Result);
        var policy = combined.MatMul(policyHead).Then(PradOp.SigmoidOp);
        var value = combined.MatMul(valueHead);

        return (policy, value);
    }
}

private class ReflexNetwork 
{
    private readonly PradOp layer1;
    private readonly PradOp layer2;
    private readonly PradOp outputLayer;

    public PradResult Forward(PradOp state)
    {
        return state.MatMul(layer1)
            .Then(PradOp.LeakyReLUOp)
            .Then(x => x.MatMul(layer2.Result))
            .Then(PradOp.LeakyReLUOp)
            .Then(x => x.MatMul(outputLayer.Result))
            .Then(PradOp.SigmoidOp);
    }
}
```

These neural components serve distinct roles:
1. The PolicyNetwork learns strategic decisions based on current state and history
2. The ReflexNetwork provides fast, pattern-based responses to immediate situations
3. The PredictionNetwork anticipates future states and field evolution

Together with the field dynamics, these networks create a hybrid system that combines geometric belief representation with learned behavioral policies.

The SPN thus represents a unification of geometric and neural approaches to belief:
- Field dynamics provide the substrate for belief representation and flow
- Neural networks learn strategic policies and immediate responses
- The combined system can both understand and explain its cognitive processes

In the next section, we'll explore how this architecture is complemented by the Enhanced VAE, which provides the latent space in which these belief fields operate.